import React, { useState } from "react";
import { Button, Label, Modal, TextInput } from "flowbite-react";
import { toast } from "react-toastify";

import { useRestaurantStore } from "../../../store/restaurantStore";
import LoadingSpinner from "../../LoadingSpinner";

interface Props {
  openModal: boolean;
  setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;
  restaurantToVerify: string | null;
  setRestaurantToVerify: React.Dispatch<React.SetStateAction<string | null>>;
}

const VerifyRestaurantModal = ({
  openModal,
  setOpenModal,
  restaurantToVerify,
  setRestaurantToVerify,
}: Props) => {
  const [commission, setCommission] = useState<number | null>(null);
  const { isLoading, verifyRestaurant } = useRestaurantStore();

  const handleVerify = async () => {
    try {
      if (commission && commission >= 0 && commission <= 50) {
        await verifyRestaurant(restaurantToVerify!, commission);
        setCommission(0);
        setRestaurantToVerify(null);
        toast.success("Restaurant verified successfully");
        setOpenModal(false);
      } else {
        return toast.error("Commission must be a number between 1 and 50!");
      }
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      {isLoading && <LoadingSpinner />}
      <Modal
        dismissible
        show={openModal}
        onClose={() => setOpenModal(false)}
        position={"center"}
      >
        <Modal.Header>Verify Restaurant and Add Commission</Modal.Header>
        <Modal.Body>
          <div className="space-y-6">
            <div>
              <div className="mb-2 block">
                <Label htmlFor="small" value="Commission (%)" />
              </div>
              <TextInput
                id="small"
                type="number"
                sizing="sm"
                value={commission!}
                onChange={(e) => setCommission(Number(e.target.value) || 0)}
              />
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button color={"failure"} onClick={handleVerify}>
            Verify Restaurant
          </Button>
          <Button color="gray" onClick={() => setOpenModal(false)}>
            Decline
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default VerifyRestaurantModal;