import { useEffect, useState } from "react";
import {
  APIProvider,
  Map,
  useMapsLibrary,
  useMap,
} from "@vis.gl/react-google-maps";

interface Props {
  customerLocation: {
    lat: number;
    lng: number;
  };
  restaurantLocation: {
    lat: number;
    lng: number;
  };
  setDeliveryTime: React.Dispatch<React.SetStateAction<number>>;
}

const OrderMap = ({
  customerLocation,
  restaurantLocation,
  setDeliveryTime,
}: Props) => {
  return (
    <APIProvider apiKey={import.meta.env.VITE_GOOGLE_MAPS_API_KEY}>
      <div className="h-[200px] w-full">
        <Map
          defaultCenter={customerLocation}
          defaultZoom={14}
          mapId={import.meta.env.VITE_GOOGLE_MAPS_MAP_ID}
          className="size-full"
        >
          <Directions
            customerLocation={customerLocation}
            restaurantLocation={restaurantLocation}
            setDeliveryTime={setDeliveryTime}
          />
        </Map>
      </div>
    </APIProvider>
  );
};

function Directions({
  customerLocation,
  restaurantLocation,
  setDeliveryTime,
}: Props) {
  const map = useMap();
  const routesLibrary = useMapsLibrary("routes");
  const [directionsService, setDirectionsService] =
    useState<google.maps.DirectionsService>();
  const [directionsRenderer, setDirectionsRenderer] =
    useState<google.maps.DirectionsRenderer>();
  const [routes, setRoutes] = useState<google.maps.DirectionsRoute[]>([]);
  const selected = routes[0];
  const leg = selected?.legs[0];

  useEffect(() => {
    if (!routesLibrary || !map) return;
    setDirectionsService(new routesLibrary.DirectionsService());
    setDirectionsRenderer(
      new routesLibrary.DirectionsRenderer({
        draggable: true,
        map,
      }),
    );
  }, [routesLibrary, map]);

  useEffect(() => {
    if (!directionsRenderer) return;

    const listener = directionsRenderer.addListener(
      "directions_changed",
      () => {
        const result = directionsRenderer.getDirections();
        if (result) {
          setRoutes(result.routes);
        }
      },
    );

    return () => google.maps.event.removeListener(listener);
  }, [directionsRenderer]);

  useEffect(() => {
    if (!directionsService || !directionsRenderer) return;

    directionsService
      .route({
        origin: restaurantLocation,
        destination: customerLocation,
        travelMode: google.maps.TravelMode.DRIVING,
        provideRouteAlternatives: true,
      })
      .then((response) => {
        directionsRenderer.setDirections(response);
        setRoutes(response.routes);
      });

    return () => directionsRenderer.setMap(null);
  }, [
    directionsService,
    directionsRenderer,
    customerLocation,
    restaurantLocation,
  ]);

  useEffect(() => {
    if (leg) {
      setDeliveryTime(leg.duration?.value || 0);
    }
  }, [leg, setDeliveryTime]);

  if (!leg) return null;

  return (
    <div className="mt-2">
      <p className="font-medium">Delivery time: {leg.duration?.text}</p>
    </div>
  );
}

export default OrderMap;