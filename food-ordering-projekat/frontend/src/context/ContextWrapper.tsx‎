import { useState } from "react";
import { Dish } from "../lib/TypesData";
import GlobalContext from "./GlobalContext";

export interface Cart {
  allDishes: {
    dish: Dish;
    quantity: number;
  }[];
  totalQuantity: number;
  totalPrice: number;
  restaurantId: string | null;
}

const ContextWrapper = ({ children }: { children: React.ReactNode }) => {
  const [cart, setCart] = useState<Cart>({
    allDishes: [],
    totalQuantity: 0,
    totalPrice: 0,
    restaurantId: null,
  });

  const addToCart = (dish: Dish, quantity: number = 1) => {
    setCart((prevCart) => {
      if (!prevCart) {
        return {
          allDishes: [{ dish, quantity }],
          totalQuantity: quantity,
          totalPrice: dish.price * quantity,
          restaurantId: dish.restaurant,
        };
      }

      // Prevent adding items from different restaurants
      if (prevCart.restaurantId !== dish.restaurant) {
        return {
          allDishes: [{ dish, quantity }],
          totalQuantity: quantity,
          totalPrice: dish.price * quantity,
          restaurantId: dish.restaurant,
        };
      }

      // Check if dish already exists
      const existingDish = prevCart.allDishes.find(
        (item) => item.dish._id === dish._id,
      );

      if (existingDish) {
        return {
          ...prevCart,
          allDishes: prevCart.allDishes.map((item) =>
            item.dish._id === dish._id
              ? { ...item, quantity: item.quantity + quantity }
              : item,
          ),
          totalQuantity: prevCart.totalQuantity + quantity,
          totalPrice: prevCart.totalPrice + dish.price * quantity,
        };
      } else {
        return {
          ...prevCart,
          allDishes: [...prevCart.allDishes, { dish, quantity }],
          totalQuantity: prevCart.totalQuantity + quantity,
          totalPrice: prevCart.totalPrice + dish.price * quantity,
        };
      }
    });
  };

  const removeFromCart = (dishId: string) => {
    setCart((prevCart) => {
      const updatedDishes = prevCart.allDishes
        .map((item) =>
          item.dish._id === dishId
            ? { ...item, quantity: item.quantity - 1 }
            : item,
        )
        .filter((item) => item.quantity > 0);

      return {
        ...prevCart,
        allDishes: updatedDishes,
        totalQuantity: prevCart.totalQuantity - 1,
        totalPrice:
          prevCart.totalPrice -
          (prevCart.allDishes.find((item) => item.dish._id === dishId)?.dish
            .price || 0),
      };
    });
  };

  const clearCart = () => {
    setCart({
      allDishes: [],
      totalQuantity: 0,
      totalPrice: 0,
      restaurantId: null,
    });
  };

  return (
    <GlobalContext.Provider
      value={{ cart, addToCart, removeFromCart, clearCart }}
    >
      {children}
    </GlobalContext.Provider>
  );
};

export default ContextWrapper;