import bcryptjs from 'bcryptjs';
import { User } from '../models/User.model.js';
import { Restaurant } from '../models/Restaurant.model.js';
import { generateTokenAndSetCookie } from '../lib/authToken.js';

/**
 * @route   POST /api/restaurants/register
 * @desc    Registers a new restaurant user and generates a token
 * @access  Public
 * @param   {string} req.body.email - Restaurant's email address
 * @param   {string} req.body.password - Restaurant's password
 * @param   {string} req.body.name - Restaurant's name
 */
export const registerRestaurant = async (req, res) => {
  const { email, password, name } = req.body;

  try {
    if (!email || !password || !name) {
      throw new Error('Fill all the required fields');
    }

    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({
        success: false,
        message: 'User already exists',
      });
    }

    const hashedPassword = await bcryptjs.hash(password, 10);
    const user = new User({
      email,
      password: hashedPassword,
      profileImage: 'https://cdn-icons-png.flaticon.com/512/10309/10309202.png',
      role: 'restaurant',
    });
    await user.save();

    const restaurantExists = await Restaurant.findOne({
      user: user._id,
    });
    if (restaurantExists) {
      return res.status(400).json({
        success: false,
        message: 'Restaurant already exists',
      });
    }

    const restaurant = new Restaurant({
      name,
      user: user._id,
    });
    await restaurant.save();

    generateTokenAndSetCookie(res, user._id);

    const fullRestaurant = await Restaurant.findOne({
      user: user._id,
    }).populate('user', '-password');

    res.status(201).json({
      success: true,
      message: 'Restaurant signed up successfully',
      restaurant: fullRestaurant,
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};

/**
 * @route   POST /api/restaurants/login
 * @desc    Logins in restaurant user and generates a token
 * @access  Public
 * @param   {string} req.body.email - Restaurant's email address
 * @param   {string} req.body.password - Restaurant's password
 */
export const loginRestaurant = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email, role: 'restaurant' });
    if (!user) {
      return res.status(400).json({
        success: false,
        message: 'Wrong credentials',
      });
    }

    const isPasswordValid = await bcryptjs.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({
        success: false,
        message: 'Wrong credentials',
      });
    }

    generateTokenAndSetCookie(res, user._id);

    const restaurant = await Restaurant.findOne({ user: user._id }).populate(
      'user',
      '-password'
    );

    res.status(200).json({
      success: true,
      message: 'Restaurant logged in successfully',
      restaurant,
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};